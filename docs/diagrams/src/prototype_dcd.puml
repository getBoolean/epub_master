@startuml PrototypeDesignClassDiagram
'skinparam linetype ortho
'skinparam backgroundColor transparent
'skinparam handwritten true
'skinparam monochrome true
'left to right direction
skinparam sequenceMessageAlign direction
hide empty members
hide empty description
'skinparam classAttributeIconSize 0
'skinparam style strictuml
'skinparam groupInheritance 4

class Client


abstract Epub <<Abstract Factory>> {
    +schema: EpubSchema
    +adapter: EpubFileAccessAdapter
    +<<Create>> fromAdapter(adapter: EpubFileAccessAdapter)
    +<<Create>> fromBytes(bytes: List<int>)
    +<<Create>> fromFile(file: File)
    +<<Create>> fromExtracted(directory: Directory)
    +{abstract} {method} title: String?
    +{abstract} {method} description: String?
    +{abstract} {method} authors: List<EpubAuthor>
    +{abstract} {method} contributors: List<EpubContributor>
    +{abstract} {method} coverImage: Future<EpubImageFile?>
    +{abstract} {method} readingOrder: List<EpubContentFile>
    +{abstract} {method} tableOfContents: EpubTableOfContents?
    +{abstract} {method} images: Map<EpubPath, EpubImageFile>
    +{abstract} {method} cssFiles: Map<EpubPath, EpubCssFile>
}
Client --> Epub
Epub --o EpubFileAccessAdapter

class Epub2 extends Epub {
    +schema: EpubSchema
    +adapter: EpubFileAccessAdapter
    +<<Create>> fromSchema(schema: EpubSchema,\n\tadapter: EpubFileAccessAdapter)
    +{method} title: String?
    +{method} description: String?
    +{method} authors: List<EpubAuthor>
    +{method} contributors: List<EpubContributor>
    +{method} coverImage: Future<EpubImageFile?>
    +{method} readingOrder: List<EpubContentFile>
    +{method} tableOfContents: EpubTableOfContents?
    +{method} images: Map<EpubPath, EpubImageFile>
    +{method} cssFiles: Map<EpubPath, EpubCssFile>
}

class Epub3 extends Epub {
    +schema: EpubSchema
    +adapter: EpubFileAccessAdapter
    +<<Create>> fromSchema(schema: EpubSchema,\n\tadapter: EpubFileAccessAdapter)
    +{method} title: String?
    +{method} description: String?
    +{method} authors: List<EpubAuthor>
    +{method} contributors: List<EpubContributor>
    +{method} coverImage: Future<EpubImageFile?>
    +{method} readingOrder: List<EpubContentFile>
    +{method} tableOfContents: EpubTableOfContents?
    +{method} images: Map<EpubPath, EpubFile>
    +{method} cssFiles: Map<EpubPath, EpubFile>
}
class EpubAuthor {
    +{field} name: String
    +{field} normalizedName: String?
    +{field} role: String?
}
class EpubContributor {
    +{field} name: String
    +{field} normalizedName: String?
    +{field} role: String?
}
Epub --o "*" EpubAuthor
Epub --o "*" EpubContributor

class EpubTableOfContents {
    +{field} title: String?
    +{field} children: List<EpubTableOfContentsItem>
}
class EpubTableOfContentsItem {
    +{field} title: String?
    +{field} content: EpubContentFile
    +{field} children: List<EpubTableOfContentsItem>
}
Epub --o EpubTableOfContents
EpubTableOfContents --o "*" EpubTableOfContentsItem


'FILES

class EpubPath {
    +path: String
    +<<Create>> EpubPath(path: String)
    +<<Create>> fromRelativePath(path: String,\n\trelativeTo: String)
    +withSeparator(pathSeparator: String): EpubPath
}
Epub ..o "*" EpubPath

class EpubFile {
    -_adapter: EpubFileAccessAdapter
    +path: EpubPath
    +type: EpubFileType
    +<<Create>> EpubFile(path: EpubPath,\n\tadapter: EpubFileAccessAdapter)
    +asBytes(): Future<List<int>>
}
EpubFile ..o EpubPath
note left of EpubFile::path
    Always relative to the root of the epub
end note
EpubFile --o EpubFileAccessAdapter
Epub --o "*" EpubFile
enum EpubFileType {
    +{static} {field} container
    +{static} {field} package
    +{static} {field} html
    +{static} {field} image
    +{static} {field} css
    +{static} {field} font
    +{static} {field} audio
    +{static} {field} video
    +{static} {field} unknown
}
EpubFile --o EpubFileType

class EpubImageFile extends EpubFile {
    +path: EpubPath
    +type: EpubFileType
    +<<Create>> EpubImageFile(path: EpubPath,\n\tadapter: EpubFileAccessAdapter)
    +asBytes(): Future<List<int>>
    +asImage(): Future<img.Image>
}
EpubImageFile ..> "package:image.Image" : <<creates>>

class EpubCssFile extends EpubFile {
    +path: EpubPath
    +type: EpubFileType
    +<<Create>> EpubCssFile(path: EpubPath,\n\tadapter: EpubFileAccessAdapter)
    +asBytes(): Future<List<int>>
    +asStyleSheet(): Future<StyleSheet>
}
EpubCssFile ..> "package:csslib.StyleSheet" : <<creates>>

class EpubContentFile extends EpubFile {
    +path: EpubPath
    +type: EpubFileType
    +fallback: EpubContentFile
    +location: EpubLocation?
    +<<Create>> EpubContentFile(path: EpubPath,\n\tfallback: EpubContentFile,\n\tlocation: EpubLocation\n\tadapter: EpubFileAccessAdapter)
    +asBytes(): Future<List<int>>
    +asString(): Future<String>
    +bySupportedType(types: List<EpubFileType>)\n\t: Future<EpubContentFile?>
}


'EPUB CFI LINKS

class EpubLocation {
    cfi: EpubCfi
    +<<Create>> fromRawCfi(cfi: String)
    +<<Create>> fromCfi(cfi: EpubCfi)
    {method} // epub navigation methods
}
EpubContentFile --o EpubLocation

package "package:epub_cfi" {
    class EpubCfi {
        fragment: String
        {method} // parsing methods
    }
}

EpubLocation --o EpubCfi


'FILE ACCESS ADAPTER

abstract EpubFileAccessAdapter <<Adapter>> {
    +{abstract} convertEpubPathToAdapterPath(path: EpubPath): String
    +{abstract} getFileAsBytes(path: String): Future<List<int>>
    +{abstract} {method} filePaths: Future<List<String>>
}

package "package:archive" as archive {
    namespace archive.archive {
        class Archive
    }

    namespace archive.archive_io {
        class Archive
    }
}

class EpubArchiveAdapter extends EpubFileAccessAdapter {
    -_archive: Archive // adaptee
    +convertEpubPathToAdapterPath(path: EpubPath): String
    +getFileAsBytes(path: String): Future<List<int>>
    +{method} filePaths: Future<List<String>>
}
EpubArchiveAdapter --> archive.archive.Archive
class EpubArchiveIOAdapter extends EpubFileAccessAdapter {
    -_archive: Archive // adaptee
    +convertEpubPathToAdapterPath(path: EpubPath): String
    +getFileAsBytes(path: String): Future<List<int>>
    +{method} filePaths: Future<List<String>>
}
EpubArchiveIOAdapter --> archive.archive_io.Archive

class EpubExtractedIOAdapter extends EpubFileAccessAdapter {
    -_rootDirectory: io.Directory // adaptee
    +convertEpubPathToAdapterPath(path: EpubPath): String
    +getFileAsBytes(path: String): Future<List<int>>
    +{method} filePaths: Future<List<String>>
}
EpubExtractedIOAdapter --> "dart:io.Directory"

'EPUB SCHEMA

class EpubSchema {
    -_rawFilePaths: Future<List<String>>
    +container: EpubContainer?
    +package: EpubPackage?
    +navigation: EpubNavigationDocument?
    +ncx: EpubNcx?
    +<<Create>> fromAdapter(adapter: EpubFileAccessAdapter)
}
class EpubNavigationDocument
class EpubNcx
EpubSchema --o EpubNavigationDocument
EpubSchema --o EpubNcx

Epub --o EpubSchema
Epub ..> EpubSchema : <<creates>>

class EpubContainer {
    +{static} path: String
    +{static} elementName: String
    +{static} namespace: String
    -_element: XmlElement
    +<<Create>> fromElement(\n\telement: XmlElement)
    +<<Create>> fromBytes(\n\tbytes: List<int>)
    +{method} containerVersion: String?
    +{method} rootfileList: RootfileList?
    +{method} rootfile: Rootfile?
    +toXmlString(): String
}
EpubSchema --o EpubContainer

class RootfileList {
    +{static} elementName: String
    -_element: XmlElement
    +<<Create>> fromElement(\n\telement: XmlElement)
    +{method} items: List<Rootfile>
    +toXmlString(): String
}
EpubContainer --o RootfileList

class Rootfile {
    +{static} elementName: String
    -_element: XmlElement
    +<<Create>> fromElement(\n\telement: XmlElement)
    +{method} fullPath: String?
    +{method} mediaType: String?
    +toXmlString(): String
}
RootfileList "1" --o "*" Rootfile

class "EpubPackage" as EpubPackage {
    +{static} mimeType: String
    +{static} elementName: String
    +{static} namespace: String
    -_element: XmlElement
    +<<Create>> fromElement(\n\telement: XmlElement)
    +<<Create>> fromBytes(\n\tbytes: List<int>)
    +{method} epubVersion: String?
    +{method} uniqueIdentifier: String?
    +{method} publicationMetadata:\n\tEpubPublicationMetadata?
    +{method} manifest: EpubManifest?
    +{method} spine: EpubSpine?
    +{method} guide: EpubGuide?
    +{method} tours: EpubTours?
    +toXmlString(): String
}
EpubSchema --o EpubPackage
@enduml
