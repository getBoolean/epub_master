{
	// Place your shu_epub workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Epub Controller Template": {
		"prefix": "cntr_epub",
		"body": [
			"part of shu_epub.controllers;",
			"",
			"class ${1}Controller {",
			"  final XmlElement ${2:elementName}Element;",
			"",
			"  static const elementName = '${2:elementName}';",
			"",
			"  const ${1}Controller._internal({",
			"    required this.${2:elementName}Element,",
			"  });",
			"",
			"  /// Throws [EpubException] if the ${2:elementName} element is not the root node",
			"  factory ${1}Controller.fromXmlElement(XmlElement ${2:elementName}Element) {",
			"    if (${2:elementName}Element.name.qualified != elementName) {",
			"      throw EpubException(",
			"        'Invalid data, expected \\$elementName to be the root node but it was not found',",
			"      );",
			"    }",
			"",
			"    return ${1}Controller._internal(",
			"      ${2:elementName}Element: ${2:elementName}Element,",
			"    );",
			"  }",
			"",
			"  /// Create an instance of [${1}Controller] from the [String] representation",
			"  /// of the navMap element",
			"  ///",
			"  /// Throws [EpubException] if the string does not have the navMap element",
			"  factory ${1}Controller.fromString(String ${2:elementName}String) {",
			"    final stringList = ${2:elementName}String.codeUnits;",
			"    final data = Uint8List.fromList(stringList);",
			"    return ${1}Controller(data);",
			"  }",
			"",
			"  /// Create an instance of [${1}Controller] from the [Uint8List] data",
			"  /// of the ${2:elementName} element in the navigation file.",
			"  ///",
			"  /// Throws [EpubException] if the data does not have the ${2:elementName} element",
			"  factory ${1}Controller(Uint8List ${2:elementName}Data) {",
			"    final String content = convert.utf8.decode(",
			"      ${2:elementName}Data,",
			"      allowMalformed: true,",
			"    );",
			"",
			"    final xmlDocument = XmlUtils.parseToXmlDocument(content);",
			"    final ${2:elementName}Element = xmlDocument.findElements('${2:elementName}').firstOrNull;",
			"",
			"    if (${2:elementName}Element == null) {",
			"      throw EpubException(",
			"        'Malformed navigation file, could not find required \\$elementName element',",
			"      );",
			"    }",
			"",
			"    return ${1}Controller.fromXmlElement(",
			"      ${2:elementName}Element,",
			"    );",
			"  }",
			"}",
		],
		"description": "Epub Controller Template"
	},
	"Epub Reader Template": {
		"prefix": "reader_epub",
		"description": "Epub Reader Template",
		"body": [
			"part of shu_epub.readers;",
			"",
			"class ${1}Reader {",
			"",
			"  /// Create an [${1}] object from the ${2} XmlElement.",
			"  ///",
			"  /// Throws [EpubException] if the ${2} element is not the root node",
			"  static ${1} fromXmlElement(XmlElement ${2}Element) {",
			"    final controller = ${1}Controller.fromXmlElement(${2}Element);",
			"    return _fromController(controller);",
			"  }",
			"",
			"  static ${1} fromString(String ${2}String) {",
			"    final controller = ${1}Controller.fromString(${2}String);",
			"    return _fromController(controller);",
			"  }",
			"",
			"  /// Create an instance of [${1}] from the [Uint8List] data",
			"  /// of the ${2} element in the navigation file.",
			"  ///",
			"  /// Throws [EpubException] if the data does not have the ${2} element",
			"  static ${1} fromData(Uint8List ${2}Data) {",
			"    final controller = ${1}Controller(${2}Data);",
			"    return _fromController(controller);",
			"  }",
			"",
			"  static ${1} _fromController(",
			"    ${1}Controller controller,",
			"  ) {",
			"    return ${1}();",
			"  }",
			"}",
		]
	},
	"Test Group for List": {
		"prefix": "list_cntrl_gr_test",
		"description": "Test Group for Epub Controller method that returns List",
		"body": [
			"group('${2:method}', () {",
			"  test(",
			"    'on input without ${4:elementName} elements, expect empty list',",
			"    () async {",
			"      final input = '''",
			"<${3:rootElementName}>",
			"</${3:rootElementName}>",
			"''';",
			"      final controller = ${1}Controller.fromString(input);",
			"      final actualValue = controller.${2:method}();",
			"",
			"      expect(actualValue, isEmpty);",
			"    },",
			"  );",
			"",
			"  test(",
			"    'on input with one ${4:elementName} element, expect a list of length 1 with it',",
			"    () async {",
			"      final input = '''",
			"<${3:rootElementName}>",
			"  <${4:elementName}>",
			"  </${4:elementName}>",
			"</${3:rootElementName}>",
			"''';",
			"      final controller = ${1}Controller.fromString(input);",
			"      final expectedValue = [${5}()];",
			"      final actualValue = controller.${2:method}();",
			"",
			"      expect(actualValue, expectedValue);",
			"    },",
			"  );",
			"});",
		],
	},
	"Test Group for Nullable Object Child": {
		"prefix": "obj_nullable_child_cntrl_gr_test",
		"description": "Test Group for Epub Controller method that returns an object (not a list) for an xml child",
		"body": [
			"group('get${2:Method}', () {",
			"  test(",
			"    'on input without a ${3:elementName} element, expect a null value',",
			"    () async {",
			"      final input = '''",
			"<${4:rootElementName}>",
			"</${4:rootElementName}>",
			"''';",
			"      final controller = ${1}Controller.fromString(input);",
			"      final actualValue = controller.get${2:Method}();",
			"",
			"      expect(actualValue, isNull);",
			"    },",
			"  );",
			"",
			"  test(",
			"    'on input with a ${3:elementName} element, expect a ${3:elementName} object',",
			"    () async {",
			"      final input = '''",
			"<${4:rootElementName}>",
			"    <${3:elementName}>",
			"    </${3:elementName}>",
			"</${4:rootElementName}>",
			"''';",
			"      final controller = ${1}Controller.fromString(input);",
			"      final expectedValue = ${5}();",
			"      final actualValue = controller.get${2:Method}();",
			"",
			"      expect(actualValue, expectedValue);",
			"    },",
			"  );",
			"});",
		],
	},
	"Test Group for Nullable Object Attribute": {
		"prefix": "obj_nullable_attr_cntrl_gr_test",
		"description": "Test Group for Epub Controller method that returns an object (not a list) for an xml attribute ",
		"body": [
			"group('get${2:Method}', () {",
			"  test(",
			"    'on input without a ${3:elementName} attribute, expect a null value',",
			"    () async {",
			"      final input = '''",
			"<${4:rootElementName}></${4:rootElementName}>",
			"''';",
			"      final controller = ${1}Controller.fromString(input);",
			"      final actualValue = controller.get${2:Method}();",
			"",
			"      expect(actualValue, isNull);",
			"    },",
			"  );",
			"",
			"  test(",
			"    'on input with a ${3:elementName} attribute, expect the String value',",
			"    () async {",
			"      final input = '''",
			"<${4:rootElementName} ${3:elementName}=\"test\"></${4:rootElementName}>",
			"''';",
			"      final controller = ${1}Controller.fromString(input);",
			"      final expectedValue = 'test';",
			"      final actualValue = controller.get${2:Method}();",
			"",
			"      expect(actualValue, expectedValue);",
			"    },",
			"  );",
			"});",
		],
	},
}